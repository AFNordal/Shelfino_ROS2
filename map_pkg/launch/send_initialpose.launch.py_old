#!/usr/bin/env python3
#
# Authors: 
#     Enrico Saccon     enrico.saccon [at] unitn.it

import os
import yaml
from pathlib import Path

from ament_index_python.packages import get_package_share_directory
from launch.substitutions import LaunchConfiguration, PythonExpression
from launch.actions import OpaqueFunction, DeclareLaunchArgument
from launch import LaunchDescription
from launch_ros.actions import Node

import launch.logging
import logging

def print_env(context):
    print(__file__)
    for key in context.launch_configurations.keys():
        print("\t", key, context.launch_configurations[key])
    return

def generate_launch_description():
    # launch.logging.launch_config.level = logging.DEBUG
    
    map_env_pkg = get_package_share_directory('map_pkg')

    map_env_params_file_path = os.path.join(map_env_pkg, 'config', 'map_config.yaml')
    if (not os.path.exists(map_env_params_file_path)):
        raise Exception("[{}] Map config file `{}` does not exist".format(__file__, map_env_params_file_path))

    # General arguments
    use_sim_time = LaunchConfiguration('use_sim_time', default='true')
    map_env_params_file = LaunchConfiguration('map_env_params_file', default=map_env_params_file_path)
    shelfino_id = LaunchConfiguration('shelfino_id', default='0')

    # Declare LaunchArguments for exposing launching arguments
    launch_args = [
        DeclareLaunchArgument(
            'use_sim_time',
            default_value=use_sim_time,
            description='Use simulation (Gazebo) clock if true'
        ),
        DeclareLaunchArgument(
            'map_env_params_file',
            default_value=map_env_params_file_path,
            description='Full path to the map_pkg params file to use'
        ),
        DeclareLaunchArgument(
            'shelfino_id',
            default_value=shelfino_id,
            description='Shelfino ID'
        ),
    ]

    shelfino_name = PythonExpression(["'shelfino", shelfino_id, "'"])

    def getParametersAndStartNode(context):
        # Parameters to be passed to the node
        map_name = ""
        map_dx = 0.0
        map_dy = 0.0
        shelfino_x = 0.0
        shelfino_y = 0.0
        shelfino_yaw = 0.0
        random_pose = False
        
        with open(context.launch_configurations["map_env_params_file"], 'r') as f:
            data = yaml.safe_load(f)
            # Load map data
            map_name = data["/**"]["ros__parameters"]["map"]
            map_dx = data["/**"]["ros__parameters"]["dx"]
            map_dy = data["/**"]["ros__parameters"]["dy"]

            # Load positions data
            random_pose = data["/**/send_initialposes"]["ros__parameters"]["init_random"]
            if not random_pose:
                vect_init_x = data["/**/send_initialposes"]["ros__parameters"]["vect_init_x"]
                vect_init_y = data["/**/send_initialposes"]["ros__parameters"]["vect_init_y"]
                vect_init_yaw = data["/**/send_initialposes"]["ros__parameters"]["vect_init_yaw"]
                vect_names = data["/**/send_initialposes"]["ros__parameters"]["vect_names"]

                assert len(vect_init_x) == len(vect_init_y) == len(vect_init_yaw) == len(vect_names), "All vectors must have the same length"

                # Find shelfino_name in vect_names
                try:
                    index = vect_names.index("shelfino"+context.launch_configurations["shelfino_id"])
                except ValueError:
                    raise Exception("[{}] {} not found in vect_names".format(__file__, "shelfino"+context.launch_configurations["shelfino_id"]))

                shelfino_x = vect_init_x[index]
                shelfino_y = vect_init_y[index]
                shelfino_yaw = vect_init_yaw[index]

                print("[{}] Initial pose: x={}, y={}, yaw={}".format(__file__, shelfino_x, shelfino_y, shelfino_yaw))

        return [Node(
            package='map_pkg',
            executable='send_initialpose',
            name='send_initialpose',
            output='screen',
            namespace = shelfino_name,
            parameters=[
                {"use_sim_time": use_sim_time},
                {"random":       random_pose},
                {"name":         map_name},
                {"yaw":          shelfino_yaw},
                {"dx":           map_dx},
                {"dy":           map_dy},
                {"x":            shelfino_x},
                {"y":            shelfino_y},
            ]
        )]


    # LaunchDescription with the additional launch files
    ld = LaunchDescription()

    for launch_arg in launch_args:
        ld.add_action(launch_arg)

    ld.add_action(OpaqueFunction(function=print_env))
    ld.add_action(OpaqueFunction(function=getParametersAndStartNode))

    return ld
